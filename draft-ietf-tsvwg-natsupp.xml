<?xml version='1.0'?>
<!DOCTYPE rfc SYSTEM 'rfc2629.dtd'>
<?rfc toc='yes'?>
<?rfc compact='yes'?>
<?rfc subcompact='no'?>

<rfc category='std'
     ipr='trust200902'
     docName='draft-ietf-tsvwg-natsupp-13.txt'>

<front>
<title abbrev='SCTP NAT Support'>
Stream Control Transmission Protocol (SCTP) Network Address Translation Support
</title>

<!-- ************** RANDALL STEWART ***************-->
<author initials='R. R.' surname='Stewart' fullname='Randall R. Stewart'>
<organization>Netflix, Inc.</organization>
<address>
    <postal>
        <street></street>
        <city>Chapin</city> <region>SC</region>
        <code>29036</code>
        <country>US</country>
    </postal>
    <email>randall@lakerest.net</email>
</address>
</author>

<!-- ************** MICHAEL TUEXEN *************** -->
<author initials='M.' surname='Tuexen' fullname='Michael Tuexen'>
    <organization abbrev='Muenster Univ. of Appl. Sciences'>
                  Muenster University of Applied Sciences</organization>
    <address>
        <postal>
            <street>Stegerwaldstrasse 39</street>
            <city>48565 Steinfurt</city>
            <country>DE</country>
        </postal>
        <email>tuexen@fh-muenster.de</email>
    </address>
</author>

<!-- *************** IRENE RUENGELER ***************** -->
<author initials='I.' surname='Ruengeler' fullname='Irene Ruengeler'>
<organization abbrev='Muenster Univ. of Appl. Sciences'>
              Muenster University of Applied Sciences</organization>
<address>
    <postal>
        <street>Stegerwaldstrasse 39</street>
        <city>48565 Steinfurt</city>
        <country>DE</country>
    </postal>
    <email>i.ruengeler@fh-muenster.de</email>
</address>
</author>

<date/>

<keyword>Internet-Draft</keyword>

<abstract>
<t>The Stream Control Transmission Protocol (SCTP) provides a reliable
communications channel between two end-hosts in many ways similar to the
Transmission Control Protocol (TCP).
With the widespread deployment of Network Address Translators (NAT),
specialized code has been added to NAT for TCP that allows multiple hosts
to reside behind a NAT and yet use only a single globally unique IPv4 address,
even when two hosts (behind a NAT) choose the same port numbers for their
connection.
This additional code is sometimes classified as Network Address and Port
Translation (NAPT).</t>
<t>This document describes the protocol extensions required for the SCTP
endpoints and the mechanisms for NAT devices necessary to provide similar
features of NAPT in the single-point and multi-point traversal scenario.</t>
</abstract>
</front>

<middle>
<section title='Introduction'>
<t>Stream Control Transmission Protocol <xref target='RFC4960'/>
provides a reliable communications channel between two end-hosts in many
ways similar to TCP <xref target='RFC0793'/>. With the widespread
deployment of Network Address Translators (NAT), specialized code has been
added to NAT for TCP that allows multiple hosts to reside behind a NAT
using private addresses (see <xref target='RFC6890'/>) and yet use only a
single globally unique IPv4 address, even when two hosts
(behind a NAT) choose the same port numbers for their connection.
This additional code is sometimes classified as Network Address and Port
Translation (NAPT).
Please note that this document focuses on the case where the NAT maps multiple
private addresses to a single public address.
To date, specialized code for SCTP has not yet been
added to most NAT devices so that only true NAT is available.
The end result of this is that only one SCTP capable host can be
behind a NAT and this host can only be single-homed.
The only alternative for supporting legacy NAT devices is to use
UDP encapsulation as specified in <xref target='RFC6951'/>.</t>
<t>This document specifies procedures allowing a NAT to support SCTP
by providing similar features to those provided by a NAPT for TCP and
other supported protocols.
The document also specifies a set of data formats for SCTP packets and a set
of SCTP endpoint procedures to support NAT traversal.
An SCTP implementation supporting these procedures can assure that in both
single-homed and multi-homed cases a NAT will maintain the proper state without
needing to change port numbers.</t>
<t>It is possible and desirable to make these changes for a number of reasons:
<list style='symbols'>
<t>It is desirable for SCTP internal end-hosts on multiple platforms to be able
to share a NAT's public IP address in the same way that a TCP session can use a
NAT.</t>
<t>If a NAT does not need to change any data within an SCTP packet it
will reduce the processing burden of NAT'ing SCTP by NOT
needing to execute the CRC32c checksum required by SCTP.</t>
<t>Not having to touch the IP payload makes the processing of ICMP
messages in NAT devices easier.</t>
</list></t>
<t>An SCTP-aware NAT will need to follow these procedures for generating
appropriate SCTP packet formats.</t>
<t>When considering this feature it is possible to have
multiple levels of support. At each level, the Internal
Host, External Host and NAT may or may not support the
features described in this document. The following table
illustrates the results of the various combinations of
support and if communications can occur between two endpoints.</t>
<texttable anchor='communication_table'
           title='Communication possibilities'>
<ttcol align='center'>Internal Host</ttcol>
<ttcol align='center'>NAT Device</ttcol>
<ttcol align='center'>External Host</ttcol>
<ttcol align='center'>Communication</ttcol>
<c>Support</c>    <c>Support</c>    <c>Support</c>    <c>Yes</c>
<c>Support</c>    <c>Support</c>    <c>No Support</c> <c>Limited</c>
<c>Support</c>    <c>No Support</c> <c>Support</c>    <c>None</c>
<c>Support</c>    <c>No Support</c> <c>No Support</c> <c>None</c>
<c>No Support</c> <c>Support</c>    <c>Support</c>    <c>Limited</c>
<c>No Support</c> <c>Support</c>    <c>No Support</c> <c>Limited</c>
<c>No Support</c> <c>No Support</c> <c>Support</c>    <c>None</c>
<c>No Support</c> <c>No Support</c> <c>No Support</c> <c>None</c>
</texttable>
<t>From the table it can be seen that when a NAT device does not support the
extension no communication can occur.
This assumes that the NAT device does not handle SCTP packets at all and
all SCTP packets sent externally from behind a NAT device are discarded by
the NAT.
In some cases, where the NAT device supports the feature but one of the two
hosts does not support the feature, communication may occur but in a
limited way.
For example only one host may be able to have a connection when a collision
case occurs.</t>
</section>

<section anchor='conventions' title='Conventions'>
<t>The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
"SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY", and "OPTIONAL" in this
document are to be interpreted as described in
<xref target='RFC2119'/>.</t>
</section>

<section title='Terminology'>
<t>This document uses the following terms, which are depicted in
<xref target='terminology_fig'/>. Familiarity with the terminology used in
<xref target='RFC4960'/> and <xref target='RFC5061'/> is assumed.
<list style='hanging'>
<t hangText="Private-Address (Priv-Addr):">
The private address that is known to the internal host.</t>
<t hangText="Internal-Port (Int-Port):">
The port number that is in use by the host holding the Private-Address.</t>
<t hangText="Internal-VTag (Int-VTag):">
The SCTP Verification Tag (VTag) that the internal host has chosen for its
communication.
The VTag is a unique 32-bit tag that must accompany any incoming SCTP packet
for this association to the Private-Address.</t>
<t hangText="External-Address (Ext-Addr):">
The address that an internal host is attempting to contact.</t>
<t hangText="External-Port (Ext-Port):">
The port number of the peer process at the External-Address.</t>
<t hangText="External-VTag (Ext-VTag):">
The Verification Tag that the host holding the External-Address has
chosen for its communication.
The VTag is a unique 32-bit tag that must accompany any incoming
SCTP packet for this association to the External-Address.</t>
<t hangText="Public-Address (Pub-Addr):">
The public address assigned to the NAT device that it uses as a source address
when sending packets towards the External-Address.</t>
</list></t>
<figure anchor='terminology_fig'
        title='Basic network setup'
        align='center'>
<artwork>
  Internal Network    |         External Network
                      |
           Private    |   Public               External
+--------+ Address    |   Address  /--\/--\    Address +--------+
|  SCTP  |         +-----+        /        \           |  SCTP  |
|endpoint|=========| NAT |=======| Internet |==========|endpoint|
|    A   |         +-----+        \        /           |    B   |
+--------+ Internal   |            \--/\--/    External+--------+
 Internal     Port    |                            Port  External
   VTag               |                                      VTag
</artwork>
</figure>
</section>

<section title='Motivation'>
<section title='SCTP NAT Traversal Scenarios'>
<t>This section defines the notion of single and
multi-point NAT traversal. </t>
<section title='Single Point Traversal'>

<t>In this case, all packets in the SCTP association go through a
single NAT, as shown below:</t>
<figure title='Single NAT scenario'
        align='center'>
<artwork>

  Internal Network    |       External Network
                      |
+--------+            |               /--\/--\           +--------+
|  SCTP  |         +-----+           /        \          |  SCTP  |
|endpoint|=========| NAT |========= | Internet | ========|endpoint|
|    A   |         +-----+           \        /          |    B   |
+--------+            |               \--/\--/           +--------+
                      |
</artwork>
</figure>

<t>A variation of this case is shown below, i.e., multiple NAT devices in a
single path:</t>
<figure title='Serial NAT Devices scenario'
        align='center'>
<artwork>
      Internal | External : Internal | External
               |          :          |
+--------+     |          :          |       /--\/--\    +--------+
|  SCTP  |  +-----+       :       +-----+   /        \   |  SCTP  |
|endpoint|==| NAT |=======:=======| NAT |==| Internet |==|endpoint|
|    A   |  +-----+       :       +-----+   \        /   |    B   |
+--------+     |          :          |       \--/\--/    +--------+
               |          :          |
</artwork>
</figure>

<t>Although one of the main benefits of SCTP multi-homing is redundant
paths, In this single point traversal scenario the NAT function represents
a single point of failure in the path of the SCTP multi-home association.
However, the rest of the path may still benefit from path diversity provided
by SCTP multi-homing.</t>

<t>The two SCTP endpoints in this case can be either single-homed or
multi-homed. However, the important thing is that the NAT device
(or NAT devices) in this case sees all the packets of the SCTP association.</t>

</section> <!-- title='Single Point Travers'-->

<section title='Multi Point Traversal'>
<t>This case involves multiple NAT devices and each NAT device only sees some
of the packets in the SCTP association.
An example is shown below:</t>
<figure title='Parallel NAT devices scenario'
        align='center'>
<artwork>

         Internal      |      External
                    +------+             /---\/---\
+--------+  /=======|NAT A |=========\  /          \     +--------+
|  SCTP  | /        +------+          \/            \    |  SCTP  |
|endpoint|/       ...                 |   Internet   |===|endpoint|
|    A   |\                            \            /    |    B   |
+--------+ \        +------+          / \          /     +--------+
            \=======|NAT B |=========/   \---\/---/
                    +------+
                       |
</artwork>
</figure>

<t>This case does NOT apply to a single-homed SCTP association (i.e.,
BOTH endpoints in the association use only one IP address). The
advantage here is that the existence of multiple NAT traversal points
can preserve the path diversity of a multi-homed association for the
entire path. This in turn can improve the robustness of the
communication.</t>
</section>
</section>

<section title='Limitations of Classical NAPT for SCTP'>
<t>Using classical NAPT may result in changing one of the SCTP port numbers
during the processing which requires the recomputation of the transport layer
checksum. Whereas for UDP and TCP this can be done very efficiently, for SCTP
the checksum (CRC32c) over the entire packet needs to be recomputed. This would
considerably add to the NAT computational burden, however hardware support may
mitigate this in some implementations.</t>
<t>An SCTP endpoint may have multiple addresses but only has a single port
number. To make multipoint traversal work, all the NAT devices involved must
recognize the packets they see as belonging to the same SCTP association and
perform port number translation in a consistent way.
One possible way of doing this is to use pre-defined table of ports and
addresses configured within each NAT.
Other mechanisms could make use of NAT to NAT communication.
Such mechanisms are not to be deployable on a wide scale base and thus not
a recommended solution.
Therefore the SCTP variant of NAT has been developed.</t>
</section>

<section title='The SCTP Specific Variant of NAT'>

<t>In this section it is assumed that there are multiple SCTP capable hosts
behind a NAT that has one Public-Address. Furthermore this section
focuses on the single point traversal scenario.</t>

<t>The modification of SCTP packets sent to the public Internet is
simple: the source address of the packet has to be replaced with the
Public-Address. It may also be necessary to establish some
state in the NAT device to later handle incoming packets.</t>

<t>For the SCTP NAT processing the NAT device has to maintain a table
of Internal-VTag, Internal-Port, External-VTag, External-Port, Private-Address,
and whether the restart procedure is disabled or not.
An entry in that table is called a NAT state control block.
The function Create() obtains the just mentioned parameters and returns
a NAT-State control block.</t>

<t>For SCTP packets coming from the public Internet the destination
address of the packets has to be replaced with the Private-Address
of the host the packet has to be delivered to. The lookup of the
Private-Address is based on the External-VTag, External-Port,
Internal-VTag and the Internal-Port.</t>

<t>The entries in the table fulfill some uniqueness conditions.
There must not be more than one entry with the same pair of Internal-Port
and External-Port. This rule can be relaxed, if all entries with the
same Internal-Port and External-Port have the support for the restart
procedure enabled. In this case there must be no more than one entry
with the same Internal-Port, External-Port and Ext-VTag and no more
than one entry with the same Internal-Port, External-Port and Int-VTag.</t>

<t>The processing of outgoing SCTP packets containing an INIT-chunk
is described in the following figure. The scenario shown is valid for all
message flows in this section.</t>
<figure align='center'>
<artwork>
<![CDATA[
                                       /--\/--\
+--------+          +-----+           /        \           +--------+
| Host A | <------> | NAT | <------> | Internet | <------> | Host B |
+--------+          +-----+           \         /          +--------+
                                       \--/\---/


             INIT[Initiate-Tag]
Priv-Addr:Int-Port ------> Ext-Addr:Ext-Port
                  Ext-VTag=0

             Create(Initiate-Tag, Int-Port, 0, Ext-Port, Priv-Addr,
                    RestartSupported)
             Returns(NAT-State control block)

           Translate To:

                        INIT[Initiate-Tag]
           Pub-Addr:Int-Port ------> Ext-Addr:Ext-Port
                            Ext-VTag=0
]]>
</artwork>
</figure>
<t>Normally a NAT control block will be created.
However, it is possible that there is already a NAT control block with the
same External-Address, External-Port, Internal-Port, and Internal-VTag
but different Private-Address.
In this case the INIT MUST be dropped by the NAT and an ABORT MUST be
sent back to the SCTP host with the M-Bit set and an appropriate error
cause (see <xref target='mbitabort'/> for the format).
The source address of the packet containing the ABORT chunk MUST be the
destination address of the packet containing the INIT chunk.</t>
<t>It is also possible that a connection to External-Address and External-Port
exists without an Internal-VTag conflict but the External-Address does not
support the DISABLE_RESTART feature (noted in the NAT control block
when the prior connection was established).
In such a case the INIT SHOULD be dropped by the NAT and an ABORT SHOULD be
sent back to the SCTP host with the M-Bit set and an appropriate error
cause (see <xref target='mbitabort'/> for the format).</t>
<t>The processing of outgoing SCTP packets containing no INIT-chunk
is described in the following figure.</t>
<figure align='center'>
<artwork>
<![CDATA[
                                       /--\/--\
+--------+          +-----+           /        \           +--------+
| Host A | <------> | NAT | <------> | Internet | <------> | Host B |
+--------+          +-----+           \         /          +--------+
                                       \--/\---/

Priv-Addr:Int-Port ------> Ext-Addr:Ext-Port
                  Ext-VTag


                          Translate To:

                          Pub-Addr:Int-Port ------> Ext-Addr:Ext-Port
                                           Ext-VTag
]]>
</artwork>
</figure>

<t>The processing of incoming SCTP packets containing INIT-ACK chunks
is described in the following figure. The Lookup() function getting as
input the Internal-VTag, Internal-Port, External-VTag, and External-Port,
returns the corresponding entry of the NAT table
and updates the External-VTag by substituting it with the value of the
Initiate-Tag of the INIT-ACK chunk. The wildcard character signifies that
the parameter's value is not considered in the Lookup() function
or changed in the Update() function, respectively.</t>
<figure align='center'>
<artwork>
<![CDATA[
                                       /--\/--\
+--------+          +-----+           /        \           +--------+
| Host A | <------> | NAT | <------> | Internet | <------> | Host B |
+--------+          +-----+           \         /          +--------+
                                       \--/\---/

                                         INIT-ACK[Initiate-Tag]
                            Pub-Addr:Int-Port <---- Ext-Addr:Ext-Port
                                             Int-VTag

         Lookup(Int-VTag, Int-Port, *, Ext-Port)
         Update(*, *, Initiate-Tag, *)

         Returns(NAT-State control block containing Priv-Addr)

               INIT-ACK[Initiate-Tag]
Priv-Addr:Int-Port <------ Ext-Addr:Ext-Port
                   Int-VTag
]]>
</artwork>
</figure>
<t>In the case Lookup fails, the SCTP packet is dropped. The Update routine
inserts the External-VTag (the Initiate-Tag of the INIT-ACK chunk)
in the NAT state control block.</t>

<t>The processing of incoming SCTP packets containing an ABORT or
SHUTDOWN-COMPLETE chunk with the T-Bit set is described in the
following figure.</t>
<figure align='center'>
<artwork>
<![CDATA[
                                       /--\/--\
+--------+          +-----+           /        \           +--------+
| Host A | <------> | NAT | <------> | Internet | <------> | Host B |
+--------+          +-----+           \         /          +--------+
                                       \--/\---/

                          Pub-Addr:Int-Port <------ Ext-Addr:Ext-Port
                                            Ext-VTag

         Lookup(*, Int-Port, Ext-VTag, Ext-Port)

         Returns(NAT-State control block containing Priv-Addr)

Priv-Addr:Int-Port <------ Ext-Addr:Ext-Port
                   Ext-VTag
]]>
</artwork>
</figure>
<t>The processing of other incoming SCTP packets is described in the
following figure.</t>
<figure align='center'>
<artwork>
<![CDATA[
                                       /--\/--\
+--------+          +-----+           /        \           +--------+
| Host A | <------> | NAT | <------> | Internet | <------> | Host B |
+--------+          +-----+           \         /          +--------+
                                       \--/\---/

                          Pub-Addr:Int-Port <------ Ext-Addr:Ext-Port
                                            Int-VTag

         Lookup(Int-VTag, Int-Port, *, Ext-Port)

         Returns(NAT-State control block containing Local-Address)

Priv-Addr:Int-Port <------ Ext-Addr:Ext-Port
                   Int-VTag
]]>
</artwork>
</figure>

<t>For an incoming packet containing an INIT-chunk a table lookup is made
only based on the addresses and port numbers.
If an entry with an External-VTag of zero is found, it is considered a
match and the External-VTag is updated.</t>
<t>This allows the handling of INIT-collision through NAT.</t>
</section>
</section>

<section title='Data Formats'>
<t>This section defines the formats used to support NAT traversal.
<xref target='chunks'/> and <xref target='errcause'/> describe chunks
and error causes sent by NAT devices and received by SCTP endpoints.
<xref target='newparam'/> describes parameters sent by SCTP endpoints and
used by NAT devices and SCTP endpoints.</t>
<section anchor='chunks' title='Modified Chunks'>
<t>This section presents existing chunks defined in <xref target='RFC4960'/>
that are modified by this document.</t>
<section anchor='mbitabort' title='Extended ABORT Chunk'>
<t>
<figure align='center'>
<artwork>
 0                   1                   2                   3
 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|   Type = 6    | Reserved  |M|T|           Length              |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
\                                                               \
/                   zero or more Error Causes                   /
\                                                               \
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
</artwork>
</figure>
</t>
<t>
The ABORT chunk is extended to add the new 'M-bit'. The M-bit
indicates to the receiver of the ABORT chunk that the chunk was not
generated by the peer SCTP endpoint, but instead by a middle box.</t>
<t>[NOTE to RFC-Editor:
<list>
<t>Assignment of M-bit to be confirmed by IANA.</t>
</list>
]</t>
</section>

<section anchor='mbiterr' title='Extended ERROR Chunk'>
<figure align='center'>
<artwork>
 0                   1                   2                   3
 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|   Type = 9    | Reserved  |M|T|           Length              |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
\                                                               \
/                   zero or more Error Causes                   /
\                                                               \
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
</artwork>
</figure>
<t>The ERROR chunk defined in <xref target='RFC4960'/> is extended to
add the new 'M-bit'. The M-bit indicates to the receiver of the ERROR chunk
that the chunk was not generated by the peer SCTP endpoint, but instead
by a middle box.</t>
<t>[NOTE to RFC-Editor:
<list>
<t>Assignment of M-bit to be confirmed by IANA.</t>
</list>
]</t>
</section>
</section>

<section anchor='errcause' title='New Error Causes'>
<t>This section defines the new error causes added by this document.</t>

<section anchor='port_coll' title='VTag and Port Number Collision Error Cause'>
<figure align='center'>
<artwork>
 0                   1                   2                   3
 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|    Cause Code = 0x00B0        |     Cause Length = Variable   |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
\                             Chunk                            /
/                                                              \
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
</artwork>
</figure>
<t><list style="hanging">
<t hangText="Cause Code: 2 bytes (unsigned integer)">
<vspace blankLines="0"/>
This field holds the IANA defined cause code for the
'VTag and Port Number Collision' Error Cause.
IANA is requested to assign the value 0x00B0 for this cause code.</t>

<t hangText="Cause Length: 2 bytes (unsigned integer)">
<vspace blankLines="0"/>
This field holds the length in bytes of the error cause.
The value MUST be the length of the Cause-Specific Information plus 4.</t>

<t hangText="Chunk: variable length">
<vspace blankLines="0"/>
The Cause-Specific Information is filled with the chunk that caused this error.
This can be an INIT, INIT-ACK, or ASCONF chunk.
Note that if the entire chunk will not fit in the ERROR chunk or ABORT chunk
being sent then the bytes that do not fit are truncated.</t>
</list></t>
<t>[NOTE to RFC-Editor:
<list>
<t>Assignment of cause code to be confirmed by IANA.</t>
</list>
]</t>
</section>

<section anchor='miss_state' title='Missing State Error Cause'>
<figure align='center'>
<artwork>
 0                   1                   2                   3
 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|    Cause Code = 0x00B1        |     Cause Length = Variable   |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
\                       Incoming Packet                        /
/                                                              \
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
</artwork>
</figure>

<t><list style="hanging">
<t hangText="Cause Code: 2 bytes (unsigned integer)">
<vspace blankLines="0"/>
This field holds the IANA defined cause code for the
'Missing State' Error Cause.
IANA is requested to assign the value 0x00B1 for this cause code.</t>

<t hangText="Cause Length: 2 bytes (unsigned integer)">
<vspace blankLines="0"/>
This field holds the length in bytes of the error cause.
The value MUST be the length of the Cause-Specific Information plus 4.</t>

<t hangText="Incoming Packet: variable length">
<vspace blankLines="0"/>
The Cause-Specific Information is filled with the IPv4 or IPv6 packet that
caused this error. The IPv4 or IPv6 header MUST be included.
Note that if the packet will not fit in the ERROR chunk or ABORT chunk
being sent then the bytes that do not fit are truncated.</t>
</list></t>
<t>[NOTE to RFC-Editor:
<list>
<t>Assignment of cause code to be confirmed by IANA.</t>
</list>
]</t>
</section>

<section anchor='portcollide' title='Port Number Collision Error Cause'>
<figure align='center'>
<artwork>
 0                   1                   2                   3
 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|    Cause Code = 0x00B2        |     Cause Length = Variable   |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
\                             Chunk                            /
/                                                              \
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
</artwork>
</figure>
<t><list style="hanging">
<t hangText="Cause Code: 2 bytes (unsigned integer)">
<vspace blankLines="0"/>
This field holds the IANA defined cause code for the
'Port Number Collision' Error Cause.
IANA is requested to assign the value 0x00B2 for this cause code.</t>

<t hangText="Cause Length: 2 bytes (unsigned integer)">
<vspace blankLines="0"/>
This field holds the length in bytes of the error cause.
The value MUST be the length of the Cause-Specific Information plus 4.</t>

<t hangText="Chunk: variable length">
<vspace blankLines="0"/>
The Cause-Specific Information is filled with the chunk that caused this error.
This can be an INIT, INIT-ACK, or ASCONF chunk.
Note that if the entire chunk will not fit in the ERROR chunk or ABORT chunk
being sent then the bytes that do not fit are truncated.</t>
</list></t>
<t>[NOTE to RFC-Editor:
<list>
<t>Assignment of cause code to be confirmed by IANA.</t>
</list>
]</t>
</section>
</section>

<section anchor='newparam' title='New Parameters' >
<t>This section defines new parameters and their valid appearance
defined by this document.</t>
<section anchor='disrestart' title='Disable Restart Parameter' >
<t>This parameter is used to indicate that the RESTART procedure
is requested to be disabled. Both endpoints of an association MUST
include this parameter in the INIT chunk and INIT-ACK chunk when
establishing an association and MUST include it in the ASCONF chunk
when adding an address to successfully disable the restart procedure.</t>
<figure align='center'>
<artwork>
 0                   1                   2                   3
 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|         Type = 0xC007         |         Length = 4            |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
</artwork>
</figure>

<t><list style="hanging">
<t hangText="Parameter Type: 2 bytes (unsigned integer)">
<vspace blankLines="0"/>
This field holds the IANA defined parameter type for the Disable Restart Parameter.
IANA is requested to assign the value 0xC007 for this parameter type.</t>

<t hangText="Parameter Length: 2 bytes (unsigned integer)">
<vspace blankLines="0"/>
This field holds the length in bytes of the parameter. The value MUST be 4.</t>
</list></t>
<t>[NOTE to RFC-Editor:
<list>
<t>Assignment of parameter type to be confirmed by IANA.</t>
</list>
]</t>
<t>This parameter MAY appear in INIT, INIT-ACK and ASCONF chunks and
MUST NOT appear in any other chunk.</t>
</section>

<section anchor='vtags-parameter' title='VTags Parameter'>
<t>This parameter is used to help a NAT recover from state loss.</t>
<figure align='center'>
<artwork>
 0                   1                   2                   3
 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|     Parameter Type = 0xC008   |     Parameter Length = 16     |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|                 ASCONF-Request Correlation ID                 |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|                   Internal Verification Tag                   |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|                   External Verification Tag                   |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
</artwork>
</figure>

<t><list style="hanging">
<t hangText="Parameter Type: 2 bytes (unsigned integer)">
<vspace blankLines="0"/>
This field holds the IANA defined parameter type for the VTags Parameter.
IANA is requested to assign the value 0xC008 for this parameter type.</t>

<t hangText="Parameter Length: 2 bytes (unsigned integer)">
<vspace blankLines="0"/>
This field holds the length in bytes of the parameter. The value MUST be 16.</t>

<t hangText="ASCONF-Request Correlation ID: 4 bytes (unsigned integer)">
<vspace blankLines="0"/>
This is an opaque integer assigned by the sender to identify each
request parameter. The receiver of the ASCONF Chunk will copy this
32-bit value into the ASCONF Response Correlation ID field of the
ASCONF-ACK response parameter. The sender of the ASCONF can use this
same value in the ASCONF-ACK to find which request the response is
for. Note that the receiver MUST NOT change this 32-bit value.</t>

<t hangText="Internal Verification Tag: 4 bytes (unsigned integer)">
<vspace blankLines="0"/>
The Verification Tag that the internal host has chosen for its communication.
The Verification Tag is a unique 32-bit tag that must accompany
any incoming SCTP packet for this association to the Private-Address.</t>

<t hangText="External Verification Tag: 4 bytes (unsigned integer)">
The Verification Tag that the host holding the External-Address has
chosen for its communication. The VTag is a unique 32-bit tag
that must accompany any incoming SCTP packet for this
association to the External-Address.</t>
</list></t>
<t>[NOTE to RFC-Editor:
<list>
<t>Assignment of parameter type to be confirmed by IANA.</t>
</list>
]</t>
<t>This parameter MAY appear in ASCONF chunks and MUST NOT appear in
any other chunk.</t>
</section>
</section>
</section>

<section title='Procedures for SCTP Endpoints and NAT Devices'>
<t>When an SCTP endpoint is behind an SCTP-aware NAT a
number of problems may arise as it tries to communicate with its peer:
<list style='symbols'>
<t>IP addresses can not not be included in the SCTP packet. This is
discussed in <xref target='setup'/>.</t>
<t>More than one host behind a NAT device could select the same VTag and source
port when talking to the same peer server. This creates a situation where
the NAT will not be able to tell the two associations apart. This situation
is discussed in <xref target='mbitport'/>.</t>
<t>When an SCTP endpoint is a server communicating with multiple peers and the
peers are behind the same NAT, then the two endpoints cannot be
distinguished by the server. This case is discussed in <xref target='collision'/>.</t>
<t>A restart of a NAT during a conversation could cause a loss of its state.
This problem and its solution is discussed in <xref target='restart'/>.</t>
<t>NAT devices need to deal with SCTP packets being fragmented at the IP layer.
This is discussed in <xref target='fragmentation'/>.</t>
<t>An SCTP endpoint may be behind two NAT devices providing redundancy.
The method to set up this scenario is discussed in
<xref target='multihomed'/>.</t>
</list></t>
<t>Each of these mechanisms requires additional chunks and parameters,
defined in this document, and possibly modified handling procedures
from those specified in <xref target='RFC4960'/>.</t>

<section anchor='setup'
         title='Association Setup Considerations for Endpoints'>
<t>The association setup procedure defined in <xref target='RFC4960'/>
allows multi-homed SCTP endpoints to exchange its IP-addresses by using
IPv4 or IPv6 address parameters in the INIT and INIT-ACK chunks.
However, this doesn't work when NAT devices are present.</t>
<t>Every association MUST initially be set up single-homed. There MUST
NOT be any IPv4 Address parameter, IPv6 Address parameter, or Supported
Address Types parameter in the INIT-chunk. The INIT-ACK chunk MUST NOT
contain any IPv4 Address parameter or IPv6 Address parameter.</t>
<t>If the association should finally be multi-homed, the procedure in
<xref target='multihomed'/> MUST be used.</t>
<t>The INIT and INIT-ACK chunk SHOULD contain the Disable Restart parameter
defined in <xref target='disrestart'/>.</t>
</section>

<section anchor='mbitport'
         title='Handling of Internal Port Number and Verification Tag Collisions'>

<t>Consider the case where two hosts in the Private-Address space want to
set up an SCTP association with the same service provided by some hosts
in the Internet. This means that the External-Port is the same.
If they both choose the same Internal-Port and Internal-VTag, the
NAT device cannot distinguish between incoming packets anymore.
But this is very unlikely.
The Internal-VTags are chosen at random and if the Internal-Ports are
also chosen from the ephemeral port range at random this gives a 46-bit
random number which has to match.
In the TCP-like NAPT case the NAT device can control the 16-bit Natted Port
and therefore avoid collisions deterministically.</t>

<t>The same can happen with the External-VTag when an INIT-ACK chunk or
an ASCONF chunk is processed by the NAT.</t>

<section title='NAT Device Considerations'>
<t>However, in this unlikely event the NAT device MUST send an ABORT
chunk with the M-bit set if the collision is triggered by an INIT
or INIT-ACK chunk or send an ERROR chunk with the M-bit set if the
collision is triggered by an ASCONF chunk.
The M-bit is a new bit defined by this document to express to
SCTP that the source of this packet is a "middle" box, not the
peer SCTP endpoint (see <xref target="mbitabort"/>).
If a packet containing an INIT-ACK chunk triggers the collision,
the corresponding packet containing the ABORT chunk MUST contain the same
source and destination address and port numbers as the packet containing
the INIT-ACK chunk. In the other two cases, the source and destination address
and port numbers MUST be swapped.</t>
<t>The sender of the ERROR or ABORT chunk MUST include the error cause
with cause code 'VTag and Port Number Collision'
(see <xref target='port_coll'/>).</t>
</section>

<section title='Endpoint Considerations'>
<t>The sender of the packet containing the INIT chunk or the receiver
of the INIT-ACK chunk, upon reception of an ABORT chunk with M-bit set
and the appropriate error cause code for colliding NAT table state is included,
MUST reinitiate the association setup procedure after choosing a new initiate
tag, if the association is in COOKIE-WAIT state. In any other state, the
SCTP endpoint MUST NOT respond.</t>

<t>The sender of the ASCONF chunk, upon reception of an ERROR chunk with
M-bit set, MUST stop adding the path to the association.</t>
</section>
</section>

<section anchor='collision'
         title='Handling of Internal Port Number Collisions'>
<t>When two SCTP hosts are behind an SCTP-aware NAT it is possible that two
SCTP hosts in the Private-Address space will want to set up an
SCTP association with the same server running on the same host in the Internet.
For the NAT, appropriate tracking may be performed by assuring that the
VTags are unique between the two hosts.</t>
<section title='NAT Device Considerations'>
<t>The NAT, when processing the INIT-ACK, should note in its internal table that
the association supports the Disable Restart extension.
This note is used when establishing future associations (i.e. when processing
an INIT from an internal host) to decide if the connection should be allowed.
The NAT device does the following when processing an INIT:
<list style='symbols'>
<t>If the INIT is destined to an external address and port for which
the NAT device has no outbound connection, it MUST allow the INIT creating an
internal mapping table.</t>
<t>If the INIT matches the external address and port of an already
existing connection, it MUST validate that the external server supports the
Disable Restart feature and, if it does, allow the INIT to be forwarded.</t>
<t>If the external server does not support the Disable Restart
extension the NAT device MUST send an ABORT with the M-bit set.</t>
</list></t>
<t>The 'Port Number Collision' error cause (see <xref target='portcollide' />)
MUST be included in the ABORT chunk.</t>
<t>If the collision is triggered by an ASCONF chunk, a packet containing an
ERROR chunk with the 'Port Number Collision' error cause MUST be sent back.</t>
</section>
<section title='Endpoint Considerations'>
<t>For the external SCTP server on the Internet this means that the
External-Port and the External-Address are the same.
If they both have chosen the same Internal-Port the server cannot distinguish
between both associations based on the address and port numbers.
For the server it looks like the association is being restarted.
To overcome this limitation the client sends a Disable Restart parameter in
the INIT-chunk.</t>
<t>When the server receives this parameter it does the following:
<list style='symbols'>
<t>It MUST include a Disable Restart parameter in the INIT-ACK to
inform the client that it will support the feature.</t>
<t>It MUST Disable the restart procedures defined in <xref target='RFC4960'/>
for this association.</t>
</list></t>
<t>Servers that support this feature will need to be capable of maintaining
multiple connections to what appears to be the same peer
(behind the NAT) differentiated only by the VTags.</t>
</section>
</section>

<section anchor='restart'
         title='Handling of Missing State'>
<section title='NAT Device Considerations'>
<t>If the NAT device receives a packet from the internal network
for which the lookup procedure does not find an entry in the NAT table,
a packet containing an ERROR chunk is sent back with the M-bit set.
The source address of the packet containing the ERROR chunk MUST
be the destination address of the incoming SCTP packet.
The verification tag is reflected and the T-bit is set.
Please note that such a packet containing an ERROR chunk SHOULD NOT
be sent if the received packet contains an ABORT, SHUTDOWN-COMPLETE
or INIT-ACK chunk. An ERROR chunk MUST NOT be sent if the received
packet contains an ERROR chunk with the M-bit set.</t>
<t>When sending the ERROR chunk, the new error cause 'Missing State'
(see <xref target='miss_state'/>) MUST be included and the new M-bit of
the ERROR chunk MUST be set (see <xref target='mbiterr'/>).</t>
<t>If the NAT device receives a packet for which it has no NAT table entry
and the packet contains an ASCONF chunk with the VTags parameter, the NAT
device MUST update its NAT table according to the verification tags in
the VTags parameter and the optional Disable Restart parameter.</t>
</section>
<section title='Endpoint Considerations'>
<t>Upon reception of this ERROR chunk by an SCTP endpoint the
receiver takes the following actions:
<list style='symbols'>
<t>It SHOULD validate that the verification tag is reflected by looking
at the VTag that would have been included in the outgoing
packet.</t>
<t>It SHOULD validate that the peer of the SCTP association supports
the dynamic address extension, if it does not discard the incoming
ERROR chunk.</t>
<t>It SHOULD generate a new ASCONF chunk containing the VTags parameter
(see <xref target='vtags-parameter'/>) and the Disable Restart
parameter if the association is using the disabled restart feature.
By processing this packet the NAT device can recover the appropriate state.
The procedures for generating an ASCONF chunk can be found in
<xref target='RFC5061'/>.</t>
</list></t>
<t>The peer SCTP endpoint receiving such an ASCONF chunk SHOULD either
add the address and respond with an acknowledgment, if the address is
new to the association (following all procedures defined in
<xref target='RFC5061'/>).
Or, if the address is already part of the association, the SCTP endpoint
MUST NOT respond with an error, but instead should respond with an ASCONF-ACK
chunk acknowledging the address but take no action (since the address is
already in the association).</t>
<t>Note that it is possible that upon receiving an ASCONF chunk containing
the VTags parameter the NAT will realize that it has an
'Internal Port Number and Verification Tag collision'.
In such a case the NAT MUST send an ERROR chunk with the error cause code set to
'VTag and Port Number Collision' (see <xref target='port_coll'/>).</t>
<t>If an SCTP endpoint receives an ERROR with
'Internal Port Number and Verification Tag collision' as the error cause
and the packet in the Error Chunk contains an ASCONF with
the VTags parameter, careful examination of the association is required.
The endpoint does the following:
<list style='symbols'>
<t>It MUST validate that the verification tag is reflected by looking
at the VTag that would have been included in the outgoing
packet.</t>
<t>It MUST validate that the peer of the SCTP association supports
the dynamic address extension. If the peer does not support it, the NAT Device
MUST discard the incoming ERROR chunk.</t>
<t>If the association is attempting to add an address (i.e. following
the procedures in <xref target='multihomed'/>) then the endpoint MUST NOT
consider the address part of the association and SHOULD make no
further attempt to add the address (i.e. cancel any ASCONF timers and
remove any record of the path), since the NAT devie has a VTag collision
and the association cannot easily create a new VTag (as it would if
the error occurred when sending an INIT).</t>
<t>If the endpoint has no other path, i.e. the procedure was executed
due to missing a state in the NAT device , then the endpoint MUST abort the
association.
This would occur only if the local NAT device restarted and accepted a new
association before attempting to repair the missing state (Note that this
is no different than what happens to all TCP connections when a NAT device
looses its state).</t>
</list></t>
</section>
</section>

<section anchor='fragmentation'
         title='Handling of Fragmented SCTP Packets by NAT Devices'>
<t>A NAT device MUST support IP reassembly of received fragmented
SCTP packets. The fragments may arrive in any order.</t>
<t>When an SCTP packet has to be fragmented by the NAT device and
the IP header forbids fragmentation a corresponding ICMP packet SHOULD
be sent.</t>
</section>

<section anchor='multihomed'
         title='Multi-Point Traversal Considerations for Endpoints'>
<t>If a multi-homed SCTP endpoint behind a NAT connects to a peer,
it SHOULD first set up the association single-homed with only one
address causing the first NAT to populate its state.
Then it SHOULD add each IP address using ASCONF chunks sent via
their respective NAT devices. The address to add is the wildcard address
and the lookup address SHOULD also contain the VTags parameter and
optionally the Disable Restart parameter as illustrated above.</t>
</section>

</section>

<section title='Various Examples of NAT Traversals'>
<t>Please note that this section is informational only.</t>
<t>The addresses being used in the following examples are IPv4 addresses
for private-use networks and for documentation as specified in <xref target='RFC6890'/>.
However, the method described here is not limited to this NAT44 case.</t>

<section title='Single-homed Client to Single-homed Server'>
<t>The internal client starts the association with the external
server via a four-way-handshake. Host A starts by sending an
INIT chunk.</t>
<figure align='center'>
<artwork>
<![CDATA[
                                       /--\/--\
+--------+          +-----+           /        \           +--------+
| Host A | <------> | NAT | <------> | Internet | <------> | Host B |
+--------+          +-----+           \         /          +--------+
                                       \--/\---/
       +---------+--------+----------+--------+-----------+
NAT    |  Int    |  Int   |   Ext    |   Ext  |    Priv   |
       |  VTag   |  Port  |   VTag   |   Port |    Addr   |
       +---------+--------+----------+--------+-----------+

   INIT[Initiate-Tag = 1234]
10.0.0.1:1 ------> 203.0.113.1:2
        Ext-VTtag = 0
]]>
</artwork>
</figure>
<t>A NAT entry is created, the source address is substituted and the
packet is sent on:</t>
<figure align='center'>
<artwork>
<![CDATA[
       NAT creates entry:
       +---------+--------+----------+--------+-----------+
NAT    |  Int    |  Int   |   Ext    |   Ext  |    Priv   |
       |  VTag   |  Port  |   VTag   |   Port |    Addr   |
       +---------+--------+----------+--------+-----------+
       |  1234   |    1   |     0    |    2   |  10.0.0.1 |
       +---------+--------+----------+--------+-----------+

                                INIT[Initiate-Tag = 1234]
                  192.0.2.1:1 ------------------------> 203.0.113.1:2
                                        Ext-VTtag = 0
]]>
</artwork>
</figure>
<t>Host B receives the INIT and sends an INIT-ACK with the NAT's external
address as destination address.</t>
<figure align='center'>
<artwork>
<![CDATA[
                                       /--\/--\
+--------+          +-----+           /        \           +--------+
| Host A | <------> | NAT | <------> | Internet | <------> | Host B |
+--------+          +-----+           \         /          +--------+
                                       \--/\---/

                                 INIT-ACK[Initiate-Tag = 5678]
                   192.0.2.1:1 <----------------------- 203.0.113.1:2
                                         Int-VTag = 1234

NAT updates entry:
       +---------+--------+----------+--------+-----------+
NAT    |  Int    |  Int   |   Ext    |   Ext  |    Priv   |
       |  VTag   |  Port  |   VTag   |   Port |    Addr   |
       +---------+--------+----------+--------+-----------+
       |  1234   |    1   |    5678  |    2   |  10.0.0.1 |
       +---------+--------+----------+--------+-----------+


INIT-ACK[Initiate-Tag = 5678]
10.0.0.1:1 <------ 203.0.113.1:2
          Int-VTag = 1234
]]>
</artwork>
</figure>
<t>The handshake finishes with a COOKIE-ECHO acknowledged by a COOKIE-ACK.</t>
<figure align='center'>
<artwork>
<![CDATA[
                                       /--\/--\
+--------+          +-----+           /        \           +--------+
| Host A | <------> | NAT | <------> | Internet | <------> | Host B |
+--------+          +-----+           \         /          +--------+
                                       \--/\---/

         COOKIE-ECHO
10.0.0.1:1 ------> 203.0.113.1:2
       Ext-VTag = 5678

                                      COOKIE-ECHO
                   192.0.2.1:1 -----------------------> 203.0.113.1:2
                                    Ext-VTag = 5678


                                       COOKIE-ACK
                   192.0.2.1:1 <----------------------- 203.0.113.1:2
                                    Int-VTag = 1234

            COOKIE-ACK
10.0.0.1:1 <------ 203.0.113.1:2
           Int-VTag = 1234
]]>
</artwork>
</figure>
</section>

<section title='Single-homed Client to Multi-homed Server'>
<t>The internal client is single-homed whereas the external server is
multi-homed. The client (Host A) sends an INIT like in the single-homed case.
</t>
<figure align='center'>
<artwork>
<![CDATA[
                                               +--------+
                               /--\/--\      /-|Router 1| \
+------+         +-----+      /        \    /  +--------+  \ +------+
| Host | <-----> | NAT | <-> | Internet | ==                =| Host |
|   A  |         +-----+      \        /    \  +--------+  / |   B  |
+------+                       \--/\--/      \-|Router 2|-/  +------+
                                               +--------+

       +---------+--------+----------+--------+-----------+
NAT    |  Int    |  Int   |   Ext    |   Ext  |    Priv   |
       |  VTag   |  Port  |   VTag   |   Port |    Addr   |
       +---------+--------+----------+--------+-----------+


 INIT[Initiate-Tag = 1234]
10.0.0.1:1 ---> 203.0.113.1:2
       Ext-VTag = 0
]]>
</artwork>
</figure>
<t>NAT creates entry:</t>
<figure align='center'>
<artwork>
<![CDATA[
       +---------+--------+----------+--------+-----------+
NAT    |  Int    |  Int   |   Ext    |   Ext  |    Priv   |
       |  VTag   |  Port  |   VTag   |   Port |    Addr   |
       +---------+--------+----------+--------+-----------+
       |  1234   |    1   |     0    |    2   |  10.0.0.1 |
       +---------+--------+----------+--------+-----------+

                             INIT[Initiate-Tag = 1234]
                192.0.2.1:1 --------------------------> 203.0.113.1:2
                                  Ext-VTag = 0
]]>
</artwork>
</figure>
<t>The server (Host B) includes its two addresses in the INIT-ACK chunk,
which results in two NAT entries.</t>
<figure align='center'>
<artwork>
<![CDATA[
                                               +--------+
                               /--\/--\      /-|Router 1| \
+------+         +-----+      /        \    /  +--------+  \ +------+
| Host | <-----> | NAT | <-> | Internet | ==                =| Host |
|   A  |         +-----+      \        /    \  +--------+  / |   B  |
+------+                       \--/\--/      \-|Router 2|-/  +------+
                                               +--------+

               INIT-ACK[Initiate-tag = 5678, IP-Addr = 203.0.113.129]
                192.0.2.1:1 <-------------------------- 203.0.113.1:2
                                 Int-VTag = 1234
]]>
</artwork>
</figure>
<t>NAT does need to change the table for second address:</t>
<figure align='center'>
<artwork>
<![CDATA[
       +---------+--------+----------+--------+-----------+
NAT    |  Int    |  Int   |   Ext    |   Ext  |    Priv   |
       |  VTag   |  Port  |   VTag   |   Port |    Addr   |
       +---------+--------+----------+--------+-----------+
       |  1234   |    1   |    5678  |    2   |  10.0.0.1 |
       +---------+--------+----------+--------+-----------+


INIT-ACK[Initiate-Tag = 5678]
10.0.0.1:1 <--- 203.0.113.1:2
         Int-VTag = 1234
]]>
</artwork>
</figure>
<t>The handshake finishes with a COOKIE-ECHO acknowledged by a COOKIE-ACK.</t>
<figure align='center'>
<artwork>
<![CDATA[
                                               +--------+
                               /--\/--\      /-|Router 1| \
+------+         +-----+      /        \    /  +--------+  \ +------+
| Host | <-----> | NAT | <-> | Internet | ==                =| Host |
|   A  |         +-----+      \        /    \  +--------+  / |   B  |
+------+                       \--/\--/      \-|Router 2|-/  +------+
                                               +--------+

       COOKIE-ECHO
10.0.0.1:1 ---> 203.0.113.1:2
       ExtVTag = 5678

                                   COOKIE-ECHO
                192.0.2.1:1 --------------------------> 203.0.113.1:2
                                  Ext-VTag = 5678


                                     COOKIE-ACK
                192.0.2.1:1 <-------------------------- 203.0.113.1:2
                                   Int-VTag = 1234

          COOKIE-ACK
10.0.0.1:1 <--- 203.0.113.1:2
         Int-VTag = 1234
]]>
</artwork>
</figure>
</section>

<section title='Multihomed Client and Server'>
<!-- FIXME: Make figures in this section and the provious one
            similar with respect to the multihoming of Host B -->
<t>The client (Host A) sends an INIT to the server (Host B), but does not
include the second address.</t>
<figure align='center'>
<artwork>
<![CDATA[
               +-------+
            /--| NAT 1 |--\       /--\/--\
+------+   /   +-------+   \     /        \     +--------+
| Host |===                 ====| Internet |====| Host B |
|   A  |   \   +-------+   /     \        /     +--------+
+------+    \--| NAT 2 |--/       \--/\--/
               +-------+

       +---------+--------+----------+--------+-----------+
NAT 1  |  Int    |  Int   |   Ext    |   Ext  |    Priv   |
       |  VTag   |  Port  |   VTag   |   Port |    Addr   |
       +---------+--------+----------+--------+-----------+

 INIT[Initiate-Tag = 1234]
10.0.0.1:1 --------> 203.0.113.1:2
         Ext-VTag = 0
]]>
</artwork>
</figure>
<t>NAT 1 creates entry:</t>
<figure align='center'>
<artwork>
<![CDATA[
       +---------+--------+----------+--------+-----------+
NAT 1  |  Int    |  Int   |   Ext    |   Ext  |    Priv   |
       |  VTag   |  Port  |   VTag   |   Port |    Addr   |
       +---------+--------+----------+--------+-----------+
       |  1234   |    1   |     0    |    2   |  10.0.0.1 |
       +---------+--------+----------+--------+-----------+


                                INIT[Initiate-Tag = 1234]
                     192.0.2.1:1 ---------------------> 203.0.113.1:2
                                        ExtVTag = 0
]]>
</artwork>
</figure>
<t>Host B includes its second address in the INIT-ACK, which results
in two NAT entries in NAT 1.</t>
<figure align='center'>
<artwork>
<![CDATA[
                     +-------+
            /--------| NAT 1 |--------\       /--\/--\
+------+   /         +-------+         \     /        \    +--------+
| Host |===                             ====| Internet |===| Host B |
|   A  |   \         +-------+         /     \        /    +--------+
+------+    \--------| NAT 2 |--------/       \--/\--/
                     +-------+

               INIT-ACK[Initiate-Tag = 5678, IP-Addr = 203.0.113.129]
                   192.0.2.1:1 <----------------------- 203.0.113.1:2
                                   Int-VTag = 1234
]]>
</artwork>
</figure>
<t>NAT 1 does not need to update the table for second address:</t>
<figure align='center'>
<artwork>
<![CDATA[
       +---------+--------+----------+--------+-----------+
NAT 1  |  Int    |  Int   |   Ext    |   Ext  |    Priv   |
       |  VTag   |  Port  |   VTag   |   Port |    Addr   |
       +---------+--------+----------+--------+-----------+
       |  1234   |    1   |    5678  |    2   |  10.0.0.1 |
       +---------+--------+----------+--------+-----------+


  INIT-ACK[Initiate-Tag = 5678]
10.0.0.1:1 <-------- 203.0.113.1:2
            Int-VTag = 1234
]]>
</artwork>
</figure>
<t>The handshake finishes with a COOKIE-ECHO acknowledged by a COOKIE-ACK.</t>
<figure align='center'>
<artwork>
<![CDATA[
                     +-------+
            /--------| NAT 1 |--------\       /--\/--\
+------+   /         +-------+         \     /        \    +--------+
| Host |===                             ====| Internet |===| Host B |
|   A  |   \         +-------+         /     \        /    +--------+
+------+    \--------| NAT 2 |--------/       \--/\--/
                     +-------+

          COOKIE-ECHO
10.0.0.1:1 --------> 203.0.113.1:2
          Ext-VTag = 5678

                                        COOKIE-ECHO
                        192.0.2.1:1 ------------------> 203.0.113.1:2
                                      Ext-VTag = 5678


                                        COOKIE-ACK
                        192.0.2.1:1 <------------------ 203.0.113.1:2
                                      Int-VTag = 1234

            COOKIE-ACK
10.0.0.1:1 <------- 203.0.113.1:2
           Int-VTag = 1234
]]>
</artwork>
</figure>
<t>Host A announces its second address in an ASCONF chunk.
The address parameter contains an undefined address (0) to indicate that
the source address should be added.
The lookup address parameter within the ASCONF chunk will also contain
the pair of VTags (external and internal) so that the NAT may populate
its table completely with this single packet.</t>

<figure align='center'>
<artwork>
<![CDATA[
                     +-------+
            /--------| NAT 1 |--------\       /--\/--\
+------+   /         +-------+         \     /        \    +--------+
| Host |===                             ====| Internet |===| Host B |
|   A  |   \         +-------+         /     \        /    +--------+
+------+    \--------| NAT 2 |--------/       \--/\--/
                     +-------+

ASCONF [ADD-IP=0.0.0.0, INT-VTag=1234, Ext-VTag = 5678]
10.1.0.1:1 --------> 203.0.113.129:2
         Ext-VTag = 5678
]]>
</artwork>
</figure>
<t>NAT 2 creates complete entry:</t>
<figure align='center'>
<artwork>
<![CDATA[
       +---------+--------+----------+--------+-----------+
NAT 2  |  Int    |  Int   |   Ext    |   Ext  |    Priv   |
       |  VTag   |  Port  |   VTag   |   Port |    Addr   |
       +---------+--------+----------+--------+-----------+
       |  1234   |    1   |    5678  |    2   |  10.1.0.1 |
       +---------+--------+----------+--------+-----------+


                  ASCONF [ADD-IP,Int-VTag=1234, Ext-VTag = 5678]
                   192.0.2.129:1 ---------------------> 203.0.113.129:2
                                        Ext-VTag = 5678

                                        ASCONF-ACK
                   192.0.2.129:1 <--------------------- 203.0.113.129:2
                                     Int-VTag = 1234

          ASCONF-ACK
10.1.0.1:1 <----- 203.0.113.129:2
         Int-VTag = 1234
]]>
</artwork>
</figure>
</section>
<section title='NAT Loses Its State'>
<t>Association is already established between Host A and Host B, when the NAT
loses its state and obtains a new public address. Host A sends a DATA chunk
to Host B.</t>
<figure align='center'>
<artwork>
<![CDATA[
                                         /--\/--\
+--------+              +-----+         /        \         +--------+
| Host A | <----------> | NAT | <----> | Internet | <----> | Host B |
+--------+              +-----+         \        /         +--------+
                                         \--/\--/

       +---------+--------+----------+--------+-----------+
NAT    |  Int    |  Int   |   Ext    |   Ext  |    Priv   |
       |  VTag   |  Port  |   VTag   |   Port |    Addr   |
       +---------+--------+----------+--------+-----------+
       |  1234   |    1   |    5678  |    2   |  10.0.0.1 |
       +---------+--------+----------+--------+-----------+

               DATA
10.0.0.1:1 ----------> 203.0.113.1:2
            Ext-VTag = 5678
]]>
</artwork>
</figure>
<t>The NAT device cannot find entry for the association.
It sends ERROR message with the M-Bit set and the cause "NAT state missing".</t>
<figure align='center'>
<artwork>
<![CDATA[
                                         /--\/--\
+--------+              +-----+         /        \         +--------+
| Host A | <----------> | NAT | <----> | Internet | <----> | Host B |
+--------+              +-----+         \        /         +--------+
                                         \--/\--/

  ERROR [M-Bit, NAT state missing]
10.0.0.1:1 <---------- 203.0.113.1:2
          Ext-VTag = 5678
]]>
</artwork>
</figure>
<t>On reception of the ERROR message, Host A sends an ASCONF chunk indicating
that the former information has to be deleted and the source address of the
actual packet added.</t>
<figure align='center'>
<artwork>
<![CDATA[
                                         /--\/--\
+--------+              +-----+         /        \         +--------+
| Host A | <----------> | NAT | <----> | Internet | <----> | Host B |
+--------+              +-----+         \        /         +--------+
                                         \--/\--/

ASCONF [ADD-IP,DELETE-IP,Int-VTag=1234, Ext-VTag = 5678]
10.0.0.1:1 ----------> 203.0.113.129:2
          Ext-VTag = 5678

       +---------+--------+----------+--------+-----------+
NAT    |  Int    |  Int   |   Ext    |   Ext  |    Priv   |
       |  VTag   |  Port  |   VTag   |   Port |    Addr   |
       +---------+--------+----------+--------+-----------+
       |  1234   |    1   |    5678  |    2   |  10.0.0.1 |
       +---------+--------+----------+--------+-----------+

        ASCONF [ADD-IP,DELETE-IP,Int-VTag=1234, Ext-VTag = 5678]
                       192.0.2.2:1 -------------------> 203.0.113.129:2
                                       Ext-VTag = 5678
]]>
</artwork>
</figure>
<t>Host B adds the new source address and deletes all former entries.</t>
<figure align='center'>
<artwork>
<![CDATA[
                                         /--\/--\
+--------+              +-----+         /        \         +--------+
| Host A | <----------> | NAT | <----> | Internet | <----> | Host B |
+--------+              +-----+         \        /         +--------+
                                         \--/\--/

                                         ASCONF-ACK
                       192.0.2.2:1 <------------------- 203.0.113.129:2
                                        Int-VTag = 1234

               ASCONF-ACK
10.1.0.1:1 <---------- 203.0.113.129:2
          Int-VTag = 1234

               DATA
10.0.0.1:1 ----------> 203.0.113.1:2
         Ext-VTag = 5678
                                          DATA
                       192.0.2.2:1 -------------------> 203.0.113.129:2
                                     Ext-VTag = 5678
]]>
</artwork>
</figure>
</section>
<section title='Peer-to-Peer Communication'>
<t>If two hosts are behind NAT devices, they have to get knowledge of the
peer's public address. This can be achieved with a so-called
rendezvous server. Afterwards the destination addresses are public,
and the association is set up with the help of the INIT collision.
The NAT devices create their entries according to their internal peer's
point of view. Therefore, NAT A's Internal-VTag and Internal-Port are
NAT B's External-VTag and External-Port, respectively. The
naming of the verification tag in the packet flow is done from the
sending peer's point of view.</t>
<figure align='center'>
<artwork>
<![CDATA[
          Internal | External           External | Internal
                   |                             |
                   |          /--\/---\          |
+--------+     +-------+     /         \     +-------+     +--------+
| Host A |<--->| NAT A |<-->| Internet  |<-->| NAT B |<--->| Host B |
+--------+     +-------+     \         /     +-------+     +--------+
                   |          \--/\---/          |


NAT-Tables
       +---------+--------+----------+--------+-----------+
NAT A  |  Int    |  Int   |   Ext    |   Ext  |    Priv   |
       |  VTag   |  Port  |   VTag   |   Port |    Addr   |
       +---------+--------+----------+--------+-----------+

       +---------+--------+----------+--------+-----------+
NAT B  |  Int    |  Int   |   Ext    |   Ext  |    Priv   |
       |  v-tag  |  port  |   v-tag  |   port |    Addr   |
       +---------+--------+----------+--------+-----------+

INIT[Initiate-Tag = 1234]
10.0.0.1:1 --> 203.0.113.1:2
        Ext-VTag = 0
]]>
</artwork>
</figure>
<t>NAT A creates entry:</t>
<figure align='center'>
<artwork>
<![CDATA[
       +---------+--------+----------+--------+-----------+
NAT A  |  Int    |  Int   |   Ext    |   Ext  |    Priv   |
       |  VTag   |  Port  |   VTag   |   Port |    Addr   |
       +---------+--------+----------+--------+-----------+
       |  1234   |    1   |     0    |    2   |  10.0.0.1 |
       +---------+--------+----------+--------+-----------+

                        INIT[Initiate-Tag = 1234]
               192.0.2.1:1 ----------------> 203.0.113.1:2
                            Ext-VTag = 0
]]>
</artwork>
</figure>
<t>NAT B processes INIT, but cannot find an entry. The SCTP packet is
silently discarded and leaves the NAT table of NAT B unchanged.</t>
<figure align='center'>
<artwork>
       +---------+--------+----------+--------+-----------+
NAT B  |  Int    |  Int   |   Ext    |   Ext  |    Priv   |
       |  VTag   |  Port  |   VTag   |   Port |    Addr   |
       +---------+--------+----------+--------+-----------+
</artwork>
</figure>
<t>Now Host B sends INIT, which is processed by NAT B. Its parameters
are used to create an entry.</t>
<figure align='center'>
<artwork>
<![CDATA[
          Internal | External           External | Internal
                   |                             |
                   |          /--\/---\          |
+--------+     +-------+     /         \     +-------+     +--------+
| Host A |<--->| NAT A |<-->| Internet  |<-->| NAT B |<--->| Host B |
+--------+     +-------+     \         /     +-------+     +--------+
                   |          \--/\---/          |

                                            INIT[Initiate-Tag = 5678]
                                           192.0.2.1:1 <-- 10.1.0.1:2
                                                         Ext-VTag = 0

       +---------+--------+-----------+----------+--------+
NAT B  |  Int    |  Int   |    Priv   |   Ext    |   Ext  |
       |  VTag   |  Port  |    Addr   |   VTag   |   Port |
       +---------+--------+-----------+----------+--------+
       |  5678   |    2   |  10.1.0.1 |     0    |    1   |
       +---------+--------+-----------+----------+--------+

                          INIT[Initiate-Tag = 5678]
               192.0.2.1:1  <--------------- 203.0.113.1:2
                                  Ext-VTag = 0
]]>
</artwork>
</figure>
<t>NAT A processes INIT. As the outgoing INIT of Host A has already created
an entry, the entry is found and updated:</t>
<figure align='center'>
<artwork>
<![CDATA[
          Internal | External           External | Internal
                   |                             |
                   |          /--\/---\          |
+--------+     +-------+     /         \     +-------+     +--------+
| Host A |<--->| NAT A |<-->| Internet  |<-->| NAT B |<--->| Host B |
+--------+     +-------+     \         /     +-------+     +--------+
                   |          \--/\---/          |

               VTag != Int-VTag, but Ext-VTag == 0, find entry.
       +---------+--------+----------+--------+-----------+
NAT A  |  Int    |  Int   |   Ext    |   Ext  |    Priv   |
       |  VTag   |  Port  |   VTag   |   Port |    Addr   |
       +---------+--------+----------+--------+-----------+
       |   1234  |   1    |   5678   |    2   |  10.0.0.1 |
       +---------+--------+----------+--------+-----------+

 INIT[Initiate-tag = 5678]
10.0.0.1:1 <-- 203.0.113.1:2
          Ext-VTag = 0
]]>
</artwork>
</figure>
<t>Host A send INIT-ACK, which can pass through NAT B:</t>
<figure align='center'>
<artwork>
<![CDATA[
          Internal | External           External | Internal
                   |                             |
                   |          /--\/---\          |
+--------+     +-------+     /         \     +-------+     +--------+
| Host A |<--->| NAT A |<-->| Internet  |<-->| NAT B |<--->| Host B |
+--------+     +-------+     \         /     +-------+     +--------+
                   |          \--/\---/          |

INIT-ACK[Initiate-Tag = 1234]
10.0.0.1:1 --> 203.0.113.1:2
      Ext-VTag = 5678


                    INIT-ACK[Initiate-Tag = 1234]
               192.0.2.1:1 ----------------> 203.0.113.1:2
                             Ext-VTag = 5678

                                             NAT B updates entry:

       +---------+--------+----------+--------+-----------+
NAT B  |  Int    |  Int   |   Ext    |   Ext  |    Priv   |
       |  VTag   |  Port  |   VTag   |   Port |    Addr   |
       +---------+--------+----------+--------+-----------+
       |  5678   |    2   |   1234   |   1    |  10.1.0.1 |
       +---------+--------+----------+--------+-----------+

                                        INIT-ACK[Initiate-Tag = 1234]
                                           192.0.2.1:1 --> 10.1.0.1:2
                                                      Ext-VTag = 5678
]]>
</artwork>
</figure>
<t>The lookup for COOKIE-ECHO and COOKIE-ACK is successful.</t>
<figure align='center'>
<artwork>
<![CDATA[
          Internal | External           External | Internal
                   |                             |
                   |          /--\/---\          |
+--------+     +-------+     /         \     +-------+     +--------+
| Host A |<--->| NAT A |<-->| Internet  |<-->| NAT B |<--->| Host B |
+--------+     +-------+     \         /     +-------+     +--------+
                   |          \--/\---/          |

                                                  COOKIE-ECHO
                                           192.0.2.1:1 <-- 10.1.0.1:2
                                                Ext-VTag = 1234

                              COOKIE-ECHO
               192.0.2.1:1 <------------- 203.0.113.1:2
                              Ext-VTag = 1234

       COOKIE-ECHO
10.0.0.1:1 <-- 203.0.113.1:2
       Ext-VTag = 1234

       COOKIE-ACK
10.0.0.1:1 --> 203.0.113.1:2
       Ext-VTag = 5678

                              COOKIE-ACK
               192.0.2.1:1 ----------------> 203.0.113.1:2
                              Ext-VTag = 5678

                                                    COOKIE-ACK
                                           192.0.2.1:1 --> 10.1.0.1:2
                                                 Ext-VTag = 5678
]]>
</artwork>
</figure>
</section>
</section>

<section title='Socket API Considerations'>
<t>This section describes how the socket API defined in
<xref target='RFC6458'/> is extended to provide a way for the
application to control NAT friendliness.</t>
<t>Please note that this section is informational only.</t>

<t>A socket API implementation based on <xref target='RFC6458'/>
is extended by supporting one new read/write socket option.</t>

<section title='Get or Set the NAT Friendliness
                (SCTP_NAT_FRIENDLY)'>
<t>This socket option uses the option_level IPPROTO_SCTP and the
option_name SCTP_NAT_FRIENDLY. It can be used to enable/disable the
NAT friendliness for future associations and retrieve the value
for future and specific ones.</t>
<figure>
<artwork>
struct sctp_assoc_value {
  sctp_assoc_t assoc_id;
  uint32_t assoc_value;
};
</artwork>
</figure>
<t>
<list style='hanging'>
<t hangText="assoc_id:">
This parameter is ignored for one-to-one style sockets.
For one-to-many style sockets the application may fill in an association
identifier or SCTP_FUTURE_ASSOC for this query.
It is an error to use SCTP_{CURRENT|ALL}_ASSOC in assoc_id.</t>
<t hangText="assoc_value:">
A non-zero value indicates a NAT-friendly mode.</t>
</list></t>
</section>
</section>

<section title='IANA Considerations'>

<t>[NOTE to RFC-Editor:
<list>
<t>"RFCXXXX" is to be replaced by the RFC number you assign this document.</t>
</list>
]</t>
<t>[NOTE to RFC-Editor:
<list>
<t>The requested values for the chunk type and the chunk parameter types
are tentative and to be confirmed by IANA.</t>
</list>
]</t>
<t>This document (RFCXXXX) is the reference for all registrations
described in this section.
The requested changes are described below.</t>

<section title='New Chunk Flags for Two Existing Chunk Types'>
<t>As defined in  <xref target='RFC6096'/> two chunk flags have to be assigned
by IANA for the ERROR chunk. The requested value for the T bit is 0x01 and
for the M bit is 0x02.</t>

<t>This requires an update of the "ERROR Chunk Flags" registry for SCTP:</t>
<texttable>
<preamble>ERROR Chunk Flags</preamble>
<ttcol align='left'>Chunk Flag Value</ttcol>
<ttcol align='left'>Chunk Flag Name</ttcol>
<ttcol align='left'>Reference</ttcol>
<c>0x01</c> <c>T bit     </c> <c>[RFCXXXX]</c>
<c>0x02</c> <c>M bit     </c> <c>[RFCXXXX]</c>
<c>0x04</c> <c>Unassigned</c> <c>         </c>
<c>0x08</c> <c>Unassigned</c> <c>         </c>
<c>0x10</c> <c>Unassigned</c> <c>         </c>
<c>0x20</c> <c>Unassigned</c> <c>         </c>
<c>0x40</c> <c>Unassigned</c> <c>         </c>
<c>0x80</c> <c>Unassigned</c> <c>         </c>
</texttable>

<t>As defined in  <xref target='RFC6096'/> one chunk flag has to be assigned
by IANA for the ABORT chunk. The requested value of the M bit is 0x02.</t>
<t>This requires an update of the "ABORT Chunk Flags" registry for SCTP:</t>
<texttable>
<preamble>ABORT Chunk Flags</preamble>
<ttcol align='left'>Chunk Flag Value</ttcol>
<ttcol align='left'>Chunk Flag Name</ttcol>
<ttcol align='left'>Reference</ttcol>
<c>0x01</c> <c>T bit     </c> <c>[RFC4960]</c>
<c>0x02</c> <c>M bit     </c> <c>[RFCXXXX]</c>
<c>0x04</c> <c>Unassigned</c> <c>         </c>
<c>0x08</c> <c>Unassigned</c> <c>         </c>
<c>0x10</c> <c>Unassigned</c> <c>         </c>
<c>0x20</c> <c>Unassigned</c> <c>         </c>
<c>0x40</c> <c>Unassigned</c> <c>         </c>
<c>0x80</c> <c>Unassigned</c> <c>         </c>
</texttable>
</section>

<section title='Three New Error Causes'>
<t>Three error causes have to be assigned by IANA.
It is requested to use the values given below.</t>
<t>This requires three additional lines in the "Error Cause Codes"
registry for SCTP:</t>
<texttable>
<preamble>Error Cause Codes</preamble>
<ttcol align='left'>Value</ttcol>
<ttcol align='left'>Cause Code</ttcol>
<ttcol align='left'>Reference</ttcol>
<c>176</c> <c>VTag and Port Number Collision</c> <c>[RFCXXXX]</c>
<c>177</c> <c>Missing State                 </c> <c>[RFCXXXX]</c>
<c>178</c> <c>Port Number Collision         </c> <c>[RFCXXXX]</c>
</texttable>
</section>

<section title='Two New Chunk Parameter Types'>
<t>Two chunk parameter types have to be assigned by IANA.
It is requested to use the values given below.
IANA should assign these values from the pool of parameters with the upper
two bits set to '11'.</t>
<t>This requires two additional lines in the "Chunk Parameter Types"
registry for SCTP:</t>
<texttable>
<preamble>Chunk Parameter Types</preamble>
<ttcol align='left'>ID Value</ttcol>
<ttcol align='left'>Chunk Parameter Type</ttcol>
<ttcol align='left'>Reference</ttcol>
<c>49159</c> <c>Disable Restart (0xC007)</c> <c>[RFCXXXX]</c>
<c>49160</c> <c>VTags (0xC008)          </c> <c>[RFCXXXX]</c>
</texttable>
</section>
</section>

<section title='Security Considerations'>
<t>State maintenance within a NAT is always a subject of possible
Denial Of Service attacks. This document recommends that at
a minimum a NAT runs a timer on any SCTP state so that old
association state can be cleaned up.</t>
<t>For SCTP endpoints, this document does not add any additional
security considerations to the ones given in
<xref target='RFC4960'/>,
<xref target='RFC4895'/>, and
<xref target='RFC5061'/>.
In particular, SCTP is protected by the verification tags and the usage of
<xref target='RFC4895'/> against off-path attackers.</t>
</section>

<section title='Acknowledgments'>
<t>The authors wish to thank
Gorry Fairhurst,
Bryan Ford,
David Hayes,
Alfred Hines,
Karen E. E. Nielsen,
Henning Peters,
Timo Voelker,
Dan Wing,
and Qiaobing Xie
for their invaluable comments.</t>
<t>In addition, the authors wish to thank David Hayes, Jason But, and Grenville Armitage,
the authors of <xref target='DOI_10.1145_1496091.1496095'/>, for their suggestions.</t>
</section>
</middle>

<back>
<references title='Normative References'>
<?rfc include='reference.RFC.2119' ?>
<?rfc include='reference.RFC.4895' ?>
<?rfc include='reference.RFC.4960' ?>
<?rfc include='reference.RFC.5061' ?>
<?rfc include='reference.RFC.6096' ?>
</references>
<references title='Informative References'>
<?rfc include='http://xml2rfc.tools.ietf.org/public/rfc/bibxml-doi/reference.DOI.10.1145/1496091.1496095' ?>
<?rfc include='reference.RFC.0793' ?>
<?rfc include='reference.RFC.6458' ?>
<?rfc include='reference.RFC.6890' ?>
<?rfc include='reference.RFC.6951' ?>
</references>
</back>
</rfc>
